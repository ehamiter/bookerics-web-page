import SwiftUI

struct Bookmark: Identifiable {
    var id = UUID()
    var title: String
    var description: String
    var thumbnailUrl: String
    var tags: String
    var url: String  // Added URL field
}

struct ContentView: View {
    // Sample bookmarks for display purposes
    let bookmarks = [
        Bookmark(title: "iommi 7.5.0 documentation", description: "iommi is a toolkit to build web apps faster. Itâ€™s built on Django but goes a lot further.", thumbnailUrl: "https://bookerics.s3.amazonaws.com/thumbnails/1691.jpg", tags: "documentation, python, libraries, user-interfaces, coding", url: "https://docs.iommi.rocks/en/latest/"),
        Bookmark(title: "radiac/nanodjango: Full Django in a single file - views, models, API ,with async support. Automatically convert it to a full project.", description: "Full Django in a single file - views, models, API ,with async support. Automatically convert it to a full project. - radiac/nanodjango", thumbnailUrl: "https://bookerics.s3.amazonaws.com/thumbnails/1692.jpg", tags: "github, code, django, projects", url: "https://github.com/radiac/nanodjango"),
        Bookmark(title: "Home - High Performance SQLite", description: "A comprehensive video course by database educator Aaron Francis. Learn everything you need to confidently use SQLite in production.", thumbnailUrl: "https://bookerics.s3.amazonaws.com/thumbnails/1693.jpg", tags: "database, sqlite, performance, guide, optimization", url: "https://highperformancesqlite.com/")
    ]
    
    var body: some View {
        ScrollView {
            VStack(spacing: 20) {
                ForEach(bookmarks) { bookmark in
                    BookmarkCard(bookmark: bookmark)
                }
            }
            .padding()
        }
    }
}

struct TagCloudView: View {
    let tags: [String]
    
    @State private var totalHeight = CGFloat.zero
    
    var body: some View {
        VStack {
            GeometryReader { geometry in
                self.generateContent(in: geometry)
            }
        }
        .frame(height: totalHeight)
    }
    
    private func generateContent(in g: GeometryProxy) -> some View {
        var width = CGFloat.zero
        var height = CGFloat.zero
        
        return ZStack(alignment: .topLeading) {
            ForEach(self.tags, id: \.self) { tag in
                self.item(for: tag)
                    .padding([.horizontal, .vertical], 4)
                    .alignmentGuide(.leading, computeValue: { d in
                        if (abs(width - d.width) > g.size.width) {
                            width = 0
                            height -= d.height
                        }
                        let result = width
                        if tag == self.tags.last! {
                            width = 0
                        } else {
                            width -= d.width
                        }
                        return result
                    })
                    .alignmentGuide(.top, computeValue: { _ in
                        let result = height
                        if tag == self.tags.last! {
                            height = 0
                        }
                        return result
                    })
            }
        }.background(viewHeightReader($totalHeight))
    }
    
    private func item(for tag: String) -> some View {
        Text(tag)
            .padding(.horizontal, 8)
            .padding(.vertical, 4)
            .background(Color.blue.opacity(0.2))
            .cornerRadius(8)
    }
    
    private func viewHeightReader(_ binding: Binding<CGFloat>) -> some View {
        return GeometryReader { geometry -> Color in
            let rect = geometry.frame(in: .local)
            DispatchQueue.main.async {
                binding.wrappedValue = rect.size.height
            }
            return .clear
        }
    }
}

struct BookmarkCard: View {
    let bookmark: Bookmark
    
    var body: some View {
        Link(destination: URL(string: bookmark.url)!) {
            VStack(alignment: .center) {
                Text(bookmark.title)
                    .font(.headline)
                Text(bookmark.description)
                    .font(.subheadline)
                AsyncImage(url: URL(string: bookmark.thumbnailUrl)) { image in
                    image.resizable()
                        .aspectRatio(contentMode: .fit)
                        .frame(height: 270)
                } placeholder: {
                    Color.gray
                        .frame(height: 270)
                }
                
                TagCloudView(tags: entry.tags)
                .padding(.top, 5)  // Space between the image and tags
            }
            .frame(maxWidth: .infinity)
            .padding()
            .background(Color.white)
            .cornerRadius(10)
            .shadow(radius: 5)
        }
        .buttonStyle(PlainButtonStyle())
    }
}

#Preview {
    ContentView()
}
